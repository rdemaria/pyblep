! lhc2016_ats_v4.mask  ---  from Yannis
! S. Fartoukh March 2009
! Ref sample job for tracking with multipole field imperfection in nominal 
! LHC magnets using V6.503 in collision
! M. Giovannozzi November 2010

!---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---8;
Option,  warn,info;
System,"rm -rf temp";
System,"mkdir temp";
!#! system,"ln -fns /afs/cern.ch/eng/lhc/optics/runII/2018 db5"; 
!#! system,"ln -fns /afs/cern.ch/eng/lhc/optics/runII/2017 db6"; ! just because there is no errors dir in 2018 yet
!#! system,"ln -fns /afs/cern.ch/eng/lhc/optics/errors/0705 wise";
!#! system,"ln -fns /afs/cern.ch/eng/lhc/optics/V6.503/WISE/After_sector_3-4_repair fidel";
!#! System,"ln -fns /afs/cern.ch/eng/lhc/optics/HLLHCV1.0 slhc";

option,-echo,-info;

!---------------------------------------------------------------;
!           CALL IN SELECTION, MACRO's, SEQUENCE, BEAM, NRJ and OPTICS FILES;
!---------------------------------------------------------------;
!Call some macro facilities
!call,file="db5/toolkit/macro.madx";

 mylhcbeam=1 ;! LHC beam 1 (clockwise)
!mylhcbeam=2 ;! LHC beam 2 (clockwise)
!mylhcbeam=4 ;! LHC beam 2 (counterclockwise)


!Think Nominal sequence
Option, -echo,-warn,-info;
if (mylhcbeam==4){
   call,file="db5/lhcb4_as-built.seq"; bvaux=1;}
else {
   call,file="lhc_as-built.seq"; bvaux=-1;};
Option, -echo,warn,-info;

!!Install MBH
!mbh_rm_mcs=0; mbh_rm_mcdo=0; !=1 to remove spools
!mbh_ir2q8=0;mbh_ir2q10=1;
!mbh_ir7q8=1;mbh_ir7q10=1;
!mbh_ir1q8=0;mbh_ir1q9=1;mbh_ir1q10=0;
!mbh_ir5q8=0;mbh_ir5q9=1;mbh_ir5q10=0;
!call,file="db5/toolkit/install_mbh.madx";

! Slice nominal sequence
!!! call,file="db5/toolkit/slice.madx";
! ...manually
makethinfactor = 4;
select, flag=makethin, clear;
select, flag=makethin, class=mb, slice=2;
select, flag=makethin, class=mq, slice=2*makethinfactor;
select, flag=makethin, class=mqxa,  slice=16*makethinfactor;
select, flag=makethin, class=mqxb,  slice=16*makethinfactor;
select, flag=makethin, pattern=mbx\.,    slice=4;
select, flag=makethin, pattern=mbrb\.,   slice=4;
select, flag=makethin, pattern=mbrc\.,   slice=4;
select, flag=makethin, pattern=mbrs\.,   slice=4;
select, flag=makethin, pattern=mbh\.,    slice=4;
select, flag=makethin, pattern=mqwa\.,   slice=4*makethinfactor;
select, flag=makethin, pattern=mqwb\.,   slice=4*makethinfactor;
select, flag=makethin, pattern=mqy\.,    slice=4*makethinfactor;
select, flag=makethin, pattern=mqm\.,    slice=4*makethinfactor;
select, flag=makethin, pattern=mqmc\.,   slice=4*makethinfactor;
select, flag=makethin, pattern=mqml\.,   slice=4*makethinfactor;
select, flag=makethin, pattern=mqtlh\.,  slice=2*makethinfactor;
select, flag=makethin, pattern=mqtli\.,  slice=2*makethinfactor;
select, flag=makethin, pattern=mqt\.  ,  slice=2*makethinfactor;

option rbarc=false; beam;
use,sequence=lhcb1; makethin,sequence=lhcb1, makedipedge=false, style=teapot;
use,sequence=lhcb2; makethin,sequence=lhcb2, makedipedge=false, style=teapot;
option rbarc=true;

is_thin=1;

!Default thin sequence !missing variables like lhclength
!Option, -echo,-warn,-info;
!if (mylhcbeam==4){
!   call,file="db5/beam_four.thin.seq"; bvaux=1;}
!else {
!   call,file="db5/V6.5.thin.seq"; bvaux=-1;};
!Option, -echo,warn,-info;

!Cycling w.r.t. to IP3 (mandatory to find closed orbit in collision in the presence of errors)
seqedit,sequence=lhcb1;flatten;cycle,start=IP3;flatten;endedit;
seqedit,sequence=lhcb2;flatten;cycle,start=IP3;flatten;endedit;

!********************************************

!NRJ= 450.0  ; ! injection
NRJ= 6500.0 ; ! collision

! A Laundau octupole current 20A inj, 550A col
I_MO=380;

!General switch to select collision (0/1)
ON_COLLISION:=1;
!General switch to install bb lens (0/1)
ON_BB_SWITCH:=1;
!General switch to install wire
ON_WIRE:=0;

 b_t_dist :=25.;!bunch separation [ns]
!b_t_dist :=50.;!bunch separation [ns]

sigt_col=0.075; ! bunch length [m] in collision

gamma_rel      := NRJ/pmass;
emittance_norm := 2.0e-6;
epsx:=emittance_norm /gamma_rel;
epsy:=emittance_norm /gamma_rel;


!********************************************

tsplit= 2.0;   !new tune split
qx00  = 62.0;  !integer h tune
qy00  = 60.0;  !integer v tune

if (NRJ<6000) {
stop;
!Inj. optics in thin lens for IR1&5 (11 m in IR1/5)
!call,file="ATS/optics_injv3_thin.madx";
call,file="prrrrr/afs/cern.ch/user/s/sfar/public/ATS2017/draft/opticsfile.1_INJ_thin";
!call,file="min/opt_inj_thin.madx";
qx0 = 62.28;   qy0 = 60.31;  qprime = 15.0;
Beam,particle=proton,sequence=lhcb1,energy=450.0,NPART=1.25e11,
     sige=4.5e-4,sigt=0.130,ex=epsx,ey=epsy;
Beam,particle=proton,sequence=lhcb2,energy=450.0,bv = bvaux,NPART=1.25e11,
     sige=4.5e-4,sigt=0.130,ex=epsx,ey=epsy;
};

if (NRJ>5999)
{
call, file="opticsfile.22_ctpps2"; ! 2018/25cm thick

! 2017 settings
!on_x1  = 160; on_sep1=  0.55; on_o1  = 0;
!on_x2  = 200; on_sep2= 1.4; on_o2  = 0; on_oe2 =-2; on_a2  = 0;
!on_x5  = 160; on_sep5= 0.55; on_o5  = 0; on_ov5=-1;
!on_x8  =-250; on_sep8= -1; on_o8  = 0; on_a8  = 0;
!on_x1  = 160;
!on_x5  = 160;

! Adding coupling
!CMRS.b1 = 1.0e-3;
!CMRS.b2 = 1.0e-3;

! i don't touch a thing, everything is fine

on_alice:=7000/nrj; on_lhcb:=+7000/nrj;
!qx0 = 62.313;   qy0 = 60.317;  qprime = 15.0;
qx0 = 62.3100;   qy0 = 60.3200;  qprime = 7.0;
Beam,particle=proton,sequence=lhcb1,energy=6500.0,NPART=1.2E11,
     sige=1.1e-4,sigt=0.075,ex=epsx,ey=epsy;
Beam,particle=proton,sequence=lhcb2,energy=6500.0,bv = bvaux,NPART=1.2E11,
     sige=1.1e-4,sigt=0.075,ex=epsx,ey=epsy;
};


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;
!                        TEST the optics
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;
!/*

! Saving crossing scheme knobs
on_x1aux=on_x1;on_sep1aux=on_sep1;
on_x2aux=on_x2;on_sep2aux=on_sep2; on_a2aux=on_a2;
on_x5aux=on_x5;on_sep5aux=on_sep5; on_ov5aux=on_ov5;
on_x8aux=on_x8;on_sep8aux=on_sep8; on_a8aux=on_a8;
on_aliceaux=on_alice; on_lhcbaux=on_lhcb; on_oe2aux=on_oe2;
on_dispaux=on_disp;

on_x1=0;on_x5=0;on_sep1=0;on_sep5=0; on_ov5=0;
on_x2=0;on_x8=0;on_a2=0;on_sep2=0;on_sep8=0; on_a8=0;
on_lhcb=0;on_alice=0; on_oe2=0;
on_disp=0;
system,"rm -f twiss.b1";system,"rm -f twiss.b2";

Use, sequence=lhcb1;
select,flag=twiss,clear;
select, flag=twiss, pattern="IP1",   column=name,s,betx,bety,alfx,alfy,dx,dpx,mux,muy;
select, flag=twiss, pattern="IP2",   column=name,s,betx,bety,alfx,alfy,dx,dpx,mux,muy;
select, flag=twiss, pattern="IP5",   column=name,s,betx,bety,alfx,alfy,dx,dpx,mux,muy;
select, flag=twiss, pattern="IP8",   column=name,s,betx,bety,alfx,alfy,dx,dpx,mux,muy;
twiss,sequence=lhcb1,file=twiss.b1;system,"cat twiss.b1";

Use, sequence=lhcb2;
select,flag=twiss,clear;
select, flag=twiss, pattern="IP1",   column=name,s,betx,bety,alfx,alfy,dx,dpx,mux,muy;
select, flag=twiss, pattern="IP2",   column=name,s,betx,bety,alfx,alfy,dx,dpx,mux,muy;
select, flag=twiss, pattern="IP5",   column=name,s,betx,bety,alfx,alfy,dx,dpx,mux,muy;
select, flag=twiss, pattern="IP8",   column=name,s,betx,bety,alfx,alfy,dx,dpx,mux,muy;
twiss, sequence=lhcb2,file=twiss.b2;system,"cat twiss.b2";

system,"rm -f twiss.b1";system,"rm -f twiss.b2";
!Switch on Xscheme
on_x1=on_x1aux;on_sep1=on_sep1aux;
on_x2=on_x2aux;on_sep2=on_sep2aux; on_oe2=on_oe2aux; on_a2=on_a2aux;
on_x5=on_x5aux;on_sep5=on_sep5aux; on_ov5=on_ov5aux;
on_x8=on_x8aux;on_sep8=on_sep8aux; on_a8=on_a8aux;
on_alice=on_aliceaux; on_lhcb=on_lhcbaux;
on_disp=on_dispaux;

Use, sequence=lhcb1;
select,flag=twiss,clear;
select, flag=twiss, pattern="IP1",   column=name,s,x,y,px,py;
select, flag=twiss, pattern="IP2",   column=name,s,x,y,px,py;
select, flag=twiss, pattern="IP5",   column=name,s,x,y,px,py;
select, flag=twiss, pattern="IP8",   column=name,s,x,y,px,py;
twiss, sequence=lhcb1, file=twiss.b1;system,"cat twiss.b1";

Use, sequence=lhcb2;
select,flag=twiss,clear;
select, flag=twiss, pattern="IP1",   column=name,s,x,y,px,py;
select, flag=twiss, pattern="IP2",   column=name,s,x,y,px,py;
select, flag=twiss, pattern="IP5",   column=name,s,x,y,px,py;
select, flag=twiss, pattern="IP8",   column=name,s,x,y,px,py;
twiss, sequence=lhcb2, file=twiss.b2;system,"cat twiss.b2";


!*/

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;
!     Wire installation
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;
! - calculate beam size before bb and error assignment as jaw opening
!   is calculated with ideal sigma
! - collimators are aligned with respect to orbit ->
!   redefine orbit after error assignment
if (ON_WIRE==1){

! wire current
! - sign = compensation
BBW_R5C=%WIREAMPS/QELECT/clight/BEAM%lhcb2->npart; !Integrated current (Lw=1), charge in beam charge units, 350 A corresponds to 66.24 LRs interactions
BBW_L5C=%WIREAMPS/QELECT/clight/BEAM%lhcb2->npart;

use, sequence=lhcb2;
twiss,sequence=lhcb2;

!get the position of the wire in B2 -> install dummy lr interactions also in b1
stctrb2=table(twiss,TCTPH.4R5.B2,s)-table(twiss,IP5,s);
stcllb2=table(twiss,TCL.4L5.B2,s)-table(twiss,IP5,s);

! install wire
if (mylhcbeam == 1) {
bbwire_l5.b1: beambeam, charge:=BBW_L5C, sigx=0.0005, sigy=0.0005, xma= %WIREDISTe-3, yma=0;
bbwire_r5.b1: beambeam, charge:=BBW_R5C, sigx=0.0005, sigy=0.0005, xma=-%WIREDISTe-3, yma=0;

use, sequence=lhcb1;
seqedit, sequence=lhcb1;
install,element=bbwire_l5.b1,at=stcllb2,from=IP5;
install,element=bbwire_r5.b1,at=stctrb2,from=IP5;
endedit;

!! Print out the wire lenses
option,-echo, -info;
system,"rm -rf wire_lenses.dat";
assign, echo=wire_lenses.dat;
printf, TEXT="bbwire_l5.b1 0 %F %F %F %F %F", value= (bbwire_l5.b1->sigx)^2*1e6, (bbwire_l5.b1->sigy)^2*1e6, 
                                                     (bbwire_l5.b1->xma )  *1e3, (bbwire_l5.b1->yma )  *1e3,bbwire_l5.b1->charge;
printf, TEXT="bbwire_r5.b1 0 %F %F %F %F %F", value= (bbwire_r5.b1->sigx)^2*1e6, (bbwire_r5.b1->sigy)^2*1e6,
                                                     (bbwire_r5.b1->xma )  *1e3, (bbwire_r5.b1->yma )  *1e3,bbwire_r5.b1->charge;
assign,echo=terminal;
};
if (mylhcbeam > 1) {
!sig* [m],yma,xma [m] = distance from closed orbit
bbwire_r5.b2: beambeam, charge:=BBW_R5C, sigx=0.0005, sigy=0.0005, yma:=BBW_R5Y, xma:=BBW_R5X;
bbwire_l5.b2: beambeam, charge:=BBW_L5C, sigx=0.0005, sigy=0.0005, yma:=BBW_L5Y, xma:=BBW_L5X;

seqedit,sequence=lhcb2;
install,element=bbwire_r5.b2,at=0,from=TCTPH.4R5.B2;
install,element=bbwire_l5.b2,at=0,from=TCL.4L5.B2;
endedit;

! set the wire current to zero, only switch it on before the tune matching
BBW_R5C_aux = BBW_R5C;
BBW_L5C_aux = BBW_L5C;
! distance wire<-> beam is calculated before tune adjustment. set to zero now
BBW_R5C = 0;
BBW_L5C = 0;
BBW_R5X = 0;
BBW_L5X = 0;
BBW_R5Y = 0;
BBW_L5Y = 0;

sigxcoll:=sqrt(epscoll*table(twiss,betx));
sigycoll:=sqrt(epscoll*table(twiss,bety));
sigx:=sqrt((BEAM%lhcb2->ex)*table(twiss,betx)+table(twiss,dx)^2*(BEAM%lhcb2->sige)^2);
sigy:=sqrt((BEAM%lhcb2->ey)*table(twiss,bety)+table(twiss,dy)^2*(BEAM%lhcb2->sige)^2);

use,sequence=lhcb2;
select,flag=twiss,clear;
select,flag=twiss,column=column=name,s,l,lrad,angle,k1l,k2l,k3l,hkick,vkick,kick,tilt,betx,bety,alfx,alfy,dx,dpx,dy,dpy,mux,muy,x,y,px,py,sigx,sigy,sigxcoll,sigycoll;
twiss,sequence=lhcb2,file=twiss_wire_sigma_b2.tfs;

sigx_coll_bbwire_l5.b2 =table(twiss,bbwire_l5.b2,sigxcoll);
sigx_coll_bbwire_r5.b2 =table(twiss,bbwire_r5.b2,sigxcoll);
sigx_bbwire_l5.b2 =table(twiss,bbwire_l5.b2,sigx);
sigx_bbwire_r5.b2 =table(twiss,bbwire_r5.b2,sigx);
betx_bbwire_l5.b2 =table(twiss,bbwire_l5.b2,betx);
betx_bbwire_r5.b2 =table(twiss,bbwire_r5.b2,betx);

value, betx_bbwire_l5.b2,sigx_bbwire_l5.b2,sigx_coll_bbwire_l5.b2;
value, betx_bbwire_r5.b2,sigx_bbwire_r5.b2,sigx_coll_bbwire_r5.b2;

value, bbwire_r5.b2->charge,bbwire_r5.b2->sigx,bbwire_r5.b2->sigy,bbwire_r5.b2->xma,bbwire_r5.b2->yma;
value, bbwire_l5.b2->charge,bbwire_l5.b2->sigx,bbwire_l5.b2->sigy,bbwire_l5.b2->xma,bbwire_l5.b2->yma;
};!end wire B2

};!end ON_WIRE ==1, wire installation
       


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;
!     Xscheme definition   & Beam-beam encounters installation
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;
call,file="macro_bb.madx";                  ! macros for beam-beam
!call, file="/afs/cern.ch/user/n/nkarast/work/LHC/TS_ATSSqueeze/sixjobs/new_macro_bb.madx";

!b_t_dist =25;        !bunch separation [ns]

!fraction_crab:=0;  !Switch on/off the crab of the strong beam (1 means 100%, -2 means -200%,..)

n_insideD1 = 5;    !default value for the number of additionnal parasitic encounters inside D1

nho_IR1= 11;        ! number of slices for head-on in IR1 (between 0 and 201)   
nho_IR2= 11;        ! number of slices for head-on in IR2 (between 0 and 201)
nho_IR5= 11;        ! number of slices for head-on in IR5 (between 0 and 201)
nho_IR8= 11;        ! number of slices for head-on in IR8 (between 0 and 201)

exec DEFINE_BB_PARAM;  !Define main beam-beam parameters


if (ON_COLLISION==1)
{
 !Switch on Xscheme in precollision
 on_x1aux=on_x1;on_sep1aux=1;
 on_x2aux=on_x2;on_sep2aux=1; on_oe2aux=on_oe2; on_a2aux=on_a2;
 on_x5aux=on_x5;on_sep5aux=1; on_ov5aux=on_ov5;
 on_x8aux=on_x8;on_sep8aux=1; on_a8aux=on_a8;
 on_aliceaux=on_alice; on_lhcbaux=on_lhcb;
 on_disp:=0;
 halo1=0;halo2=5;halo5=0;halo8=0;  !halo collision at 5 sigma's in Alice
 ! number of collision/turn at IP1/2/5/8
 nco_IP1= 2544;
 nco_IP5= nco_IP1;
 nco_IP2= 2215;
 nco_IP8= 2332;
 exec LEVEL_PARALLEL_OFFSET_FOR(2e32, 8); value,halo8/2.*sqrt(3.*epsx)*1e3;
!Redefine the on_sep's accordingly
 exec CALCULATE_XSCHEME(halo1,halo2,halo5,halo8);
 on_sep1aux=on_sep1; on_sep2aux=on_sep2; on_sep5aux=on_sep5; on_sep8aux=on_sep8;
};

! Saving crossing scheme knobs
on_x1aux=on_x1;on_sep1aux=on_sep1;
on_x2aux=on_x2;on_sep2aux=on_sep2; on_oe2aux=on_oe2; on_a2aux=on_a2;
on_x5aux=on_x5;on_sep5aux=on_sep5; on_ov5aux=on_ov5;
on_x8aux=on_x8;on_sep8aux=on_sep8; on_a8aux=on_a8;
on_aliceaux=on_alice; on_lhcbaux=on_lhcb;
!on_dispaux=on_disp;
on_disp=0; !see old mask don't know why

!Record the nominal IP position and crossing angle
if(mylhcbeam==1) {use,  sequence=lhcb1;};
if(mylhcbeam>1) {use,  sequence=lhcb2;};
twiss;
xnom1=table(twiss,IP1,x);pxnom1=table(twiss,IP1,px);
ynom1=table(twiss,IP1,y);pynom1=table(twiss,IP1,py);
xnom2=table(twiss,IP2,x);pxnom2=table(twiss,IP2,px);
ynom2=table(twiss,IP2,y);pynom2=table(twiss,IP2,py);
xnom5=table(twiss,IP5,x);pxnom5=table(twiss,IP5,px);
ynom5=table(twiss,IP5,y);pynom5=table(twiss,IP5,py);
xnom8=table(twiss,IP8,x);pxnom8=table(twiss,IP8,px);
ynom8=table(twiss,IP8,y);pynom8=table(twiss,IP8,py);
value,xnom1,xnom2,xnom5,xnom8;
value,ynom1,ynom2,ynom5,ynom8;
value,pxnom1,pxnom2,pxnom5,pxnom8;
value,pynom1,pynom2,pynom5,pynom8;

if( ON_BB_SWITCH == 1)
{

!Install b-b marker
exec INSTALL_BB_MARK(b1);exec INSTALL_BB_MARK(b2);

!Define bb lenses for both beams in all IR's and calculate # of encounters before D1
exec CALCULATE_BB_LENS;


!Install bb lenses
on_ho1 =1; on_lr1l = 1; on_lr1r = 1; npara_1 = npara0_1 + n_insideD1;
on_ho5 =1; on_lr5l = 1; on_lr5r = 1; npara_5 = npara0_5 + n_insideD1;
on_ho2 =1; on_lr2l = 1; on_lr2r = 1; npara_2 = npara0_2 + n_insideD1;
on_ho8 =1; on_lr8l = 1; on_lr8r = 1; npara_8 = npara0_8 + n_insideD1;
if(mylhcbeam==1) {exec INSTALL_BB_LENS(b1);};
if(mylhcbeam==2) {exec INSTALL_BB_LENS(b2);};
!Make 8b4e filling scheme
!                                Bim, IP, b, e, pos
!exec, REMOVE_BB_LENS_FILL_SCHEME(  1,  1, 8, 4, 1);
!exec, REMOVE_BB_LENS_FILL_SCHEME(  1,  2, 8, 4, 1);
!exec, REMOVE_BB_LENS_FILL_SCHEME(  1,  5, 8, 4, 1);
!exec, REMOVE_BB_LENS_FILL_SCHEME(  1,  8, 8, 4, 1);

!Print the lenses in bb_lenses.dat
exec, PRINT_BB_LENSES;

ON_BB_CHARGE := 0; !Switch off the charge the bb lenses

/*
!Plot b-b separation
exec PLOT_BB_SEP(1,$npara_1);
exec PLOT_BB_SEP(2,$npara_2);
exec PLOT_BB_SEP(5,$npara_5);
exec PLOT_BB_SEP(8,$npara_8);
*/

!/*
!seqedit,sequence=lhcb1;flatten;cycle,start=IP1;endedit;
!seqedit,sequence=lhcb2;flatten;cycle,start=IP1;endedit;

use,sequence=lhcb1;
select,flag=twiss,clear;
select,flag=twiss,class=marker,pattern=PAR.*L1,range=mbxw.f4l1/IP1.L1,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
select,flag=twiss,class=marker,pattern=PAR.*L5,range=mbxw.f4l5/IP5,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
select,flag=twiss,class=marker,pattern=PAR.*R1,range=IP1/mbxw.f4r1,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
select,flag=twiss,class=marker,pattern=PAR.*R5,range=IP5/mbxw.f4r5,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
select,flag=twiss,class=marker,pattern=IP1,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
select,flag=twiss,class=marker,pattern=IP5,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
twiss,file=twiss_bb.b1;system,"cat twiss_bb.b1";

use,sequence=lhcb2;
select,flag=twiss,clear;
select,flag=twiss,class=marker,pattern=PAR.*L1,range=mbxw.f4l1/IP1.L1,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
select,flag=twiss,class=marker,pattern=PAR.*L5,range=mbxw.f4l5/IP5,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
select,flag=twiss,class=marker,pattern=PAR.*R1,range=IP1/mbxw.f4r1,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
select,flag=twiss,class=marker,pattern=PAR.*R5,range=IP5/mbxw.f4r5,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
select,flag=twiss,class=marker,pattern=IP1,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
select,flag=twiss,class=marker,pattern=IP5,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
twiss,file=twiss_bb.b2;system,"cat twiss_bb.b2";

if(mylhcbeam==1) {use,sequence=lhcb1;};
if(mylhcbeam>1) {use,sequence=lhcb2;};

select,flag=twiss,clear;
select,flag=twiss,pattern=HO,class=beambeam,column=s,name,betx,bety,alfx,alfy,mux,muy,x,y,px,py;
twiss,file=twiss_bb;system,"cat twiss_bb";

!seqedit,sequence=lhcb1;flatten;cycle,start=IP3;endedit;
!seqedit,sequence=lhcb2;flatten;cycle,start=IP3;endedit;
!*/

!Remove bb markers
exec REMOVE_BB_MARKER;

/*
!Make and plot footprint (at 6 sigmas)
ON_BB_CHARGE := 1;

!Switch on Xscheme
on_x1=on_x1aux;on_sep1=on_sep1aux;
on_x2=on_x2aux;on_sep2=on_sep2aux; on_oe2=on_oe2aux;on_a2=on_a2aux;
on_x5=on_x5aux;on_sep5=on_sep5aux; on_ov5=on_ov5aux;
on_x8=on_x8aux;on_sep8=on_sep8aux; on_a8=on_a8aux;
on_alice=on_aliceaux; on_lhcb=on_lhcbaux;
on_disp=on_dispaux;

nsigmax=6;

if(qx0-qx00<0.3){
if(mylhcbeam==1) {exec MAKEFOOTPRINT(b1);exec PLOTFOOTPRINT(b1,0.2795,0.2805,0.3095,0.3105);};
if(mylhcbeam>1) {exec MAKEFOOTPRINT(b2);exec PLOTFOOTPRINT(b2,0.2795,0.2805,0.3095,0.3105);};
};
if(qx0-qx00>0.3){
if(mylhcbeam==1) {exec MAKEFOOTPRINT(b1);exec PLOTFOOTPRINT(b1,0.300,0.315,0.310,0.325);};
if(mylhcbeam>1) {exec MAKEFOOTPRINT(b2);exec PLOTFOOTPRINT(b2,0.300,0.315,0.310,0.325);};
};
ON_BB_CHARGE := 0;
on_x1=0;on_sep1=0;
on_x2=0;on_sep2=0;on_a2=0;on_oe2=0;
on_x5=0;on_sep5=0; on_ov5=0;
on_x8=0;on_sep8=0; on_a8=0;
on_alice=0; on_lhcb=0;
on_disp=0;
*/

!Remove bb lens for both beams
!exec REMOVE_BB_LENS;

};

/*
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;
!                        TEST the crossing scheme
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;
! restoring crossing knobs
on_x1=on_x1aux;on_sep1=on_sep1aux;
on_x2=on_x2aux;on_sep2=on_sep2aux; on_oe2=on_oe2aux;on_a2=on_a2aux;
on_x5=on_x5aux;on_sep5=on_sep5aux; on_ov5=on_ov5aux;
on_x8=on_x8aux;on_sep8=on_sep8aux;on_a8=on_a8aux;
on_alice=on_aliceaux; on_lhcb=on_lhcbaux;
on_disp=on_dispaux;

Use, sequence=lhcb1;
select,flag=twiss,clear;
select, flag=twiss, pattern="IP1",   column=name,s,x,y,px,py;
select, flag=twiss, pattern="IP2",   column=name,s,x,y,px,py;
select, flag=twiss, pattern="IP5",   column=name,s,x,y,px,py;
select, flag=twiss, pattern="IP8",   column=name,s,x,y,px,py;
twiss, sequence=lhcb1, file=twiss.b1;system,"cat twiss.b1";

Use, sequence=lhcb2;
select,flag=twiss,clear;
select, flag=twiss, pattern="IP1",   column=name,s,x,y,px,py;
select, flag=twiss, pattern="IP2",   column=name,s,x,y,px,py;
select, flag=twiss, pattern="IP5",   column=name,s,x,y,px,py;
select, flag=twiss, pattern="IP8",   column=name,s,x,y,px,py;
twiss, sequence=lhcb2, file=twiss.b2;system,"cat twiss.b2";
*/



!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;
!               Prepare nominal twiss tables
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;
if (mylhcbeam==1) { use,sequence=lhcb1;}
else {use,sequence=lhcb2;};

/*
 twiss;
 x.ip1=table(twiss,IP1,x);px.ip1=table(twiss,IP1,px);
 y.ip1=table(twiss,IP1,y);px.ip1=table(twiss,IP1,py); //irrelevant when recycling the sequences
*/

! disable crossing bumps
on_x1=0;on_sep1=0;
on_x2=0;on_sep2=0; on_oe2=0;on_a2=0;
on_x5=0;on_sep5=0; on_ov5=0;
on_x8=0;on_sep8=0; on_a8=0;
on_alice=0;on_lhcb=0;
on_disp=0;

 twiss, table=nominal;   // used by orbit correction
 beta.ip1=table(twiss,IP1,betx);value,beta.ip1;

! print nominal optics parameter at the MB, MQS and MSS for
! b2, b3, b4, b5, a2 and a3 correction
 select, flag=twiss, clear;
 select, flag=twiss,pattern=MB\.   ,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MBH\.   ,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MQT\.14,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MQT\.15,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MQT\.16,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MQT\.17,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MQT\.18,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MQT\.19,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MQT\.20,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,pattern=MQT\.21,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,class=MQS                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,class=MSS                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,class=MCO                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,class=MCD                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 select, flag=twiss,class=MCS                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;
 twiss,  file='temp/optics0_MB.mad';

! print nominal optics parameter at the D1, MQX and triplet corrector
! for triplet correction
 select, flag=twiss, clear;
 select, flag=twiss, pattern=MQX  , class=multipole, column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MBX  , class=multipole, column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MBRC , class=multipole, column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MQSX                  , column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MCSX                  , column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MCTX                  , column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MCOSX                 , column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MCOX                  , column=name,betx,bety,x,y;
 select, flag=twiss, pattern=MCSSX                 , column=name,betx,bety,x,y;
 twiss,  file='temp/optics0_inser.mad';

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!                   Align separation magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!if(mylhcbeam==1)
!{call, file = "db5/measured_errors/align_D1_slices.b1.madx";
!call, file = "db5/measured_errors/align_D2_slices.b1.madx";
!call, file = "db5/measured_errors/align_D3_slices.b1.madx";
!call, file = "db5/measured_errors/align_D4_slices.b1.madx";};
!
!if(mylhcbeam>1)
!{call, file = "db5/measured_errors/align_D1_slices.b2.madx";
!call, file = "db5/measured_errors/align_D2_slices.b2.madx";
!call, file = "db5/measured_errors/align_D3_slices.b2.madx";
!call, file = "db5/measured_errors/align_D4_slices.b2.madx";};

!call,file="db5/toolkit/align_sepdip.madx";
!exec,align_mbxw;  ! V6.503  D1
!exec,align_mbrc15;! V6.503 D2 in IR15

!exec,align_mbx28; ! V6.503 D1 in IR28
!exec,align_mbrc28;! V6.503 D2 in IR28
!exec,align_mbrs;  ! V6.503 D3 in IR4
!exec,align_mbrb;  ! V6.503 D4 in IR4

!call,file="slhc/toolkit/align_mbh.madx"; ! align 11T dipoles


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!         Call error subroutines (nominal machine and new IT/D1)
!                         and error tables
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

! Error routine and measured error table for nominal LHC

!call,file="db5/measured_errors/Msubroutines_new.madx";
!call,file="db5/measured_errors/Msubroutines_MS_MSS_MO_new.madx";
!call,file="db5/toolkit/Orbit_Routines.madx";
!call,file="db5/toolkit/SelectLHCMonCor.madx";
!readtable, file="db5/measured_errors/rotations_Q2_integral.tab";
!call,file="db5/errors/macro_error.madx";  ! some macros for error generation

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!                Switch ON/OFF some multipole                         
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

!exec ON_ALL_MULT;
ON_LSF=0;

 ON_A1s =  0 ; ON_A1r =  0 ; ON_B1s =  0 ; ON_B1r =  0;
 ON_A2s =  1 ; ON_A2r =  1 ; ON_B2s =  0 ; ON_B2r =  0;
 ON_A3s =  1 ; ON_A3r =  1 ; ON_B3s =  1 ; ON_B3r =  1;
 ON_A4s =  1 ; ON_A4r =  1 ; ON_B4s =  1 ; ON_B4r =  1;
 ON_A5s =  1 ; ON_A5r =  1 ; ON_B5s =  1 ; ON_B5r =  1;
 ON_A6s =  1 ; ON_A6r =  1 ; ON_B6s =  1 ; ON_B6r =  1;
 ON_A7s =  1 ; ON_A7r =  1 ; ON_B7s =  1 ; ON_B7r =  1;
 ON_A8s =  1 ; ON_A8r =  1 ; ON_B8s =  1 ; ON_B8r =  1;
 ON_A9s =  1 ; ON_A9r =  1 ; ON_B9s =  1 ; ON_B9r =  1;
 ON_A10s =  1; ON_A10r =  1; ON_B10s =  1; ON_B10r =  1;
 ON_A11s =  1; ON_A11r =  1; ON_B11s =  1; ON_B11r =  1;
 ON_A12s =  ON_LSF; ON_A12r = ON_LSF; ON_B12s = ON_LSF; ON_B12r =  ON_LSF;
 ON_A13s =  ON_LSF; ON_A13r = ON_LSF; ON_B13s = ON_LSF; ON_B13r =  ON_LSF;
 ON_A14s =  ON_LSF; ON_A14r = ON_LSF; ON_B14s = ON_LSF; ON_B14r =  ON_LSF;
 ON_A15s =  ON_LSF; ON_A15r = ON_LSF; ON_B15s = ON_LSF; ON_B15r =  ON_LSF;


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Define the seed number (for statistical error assignment in the new IT/D1)
! and call the corresponding measured error table for nominal LHC magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

!For the mask file
eoption,seed=1;
!if (NRJ<4999.999) {readtable, file="wise/injection_errors-emfqcs-1.tfs" ;};
!if (NRJ>5000.000) {readtable, file="wise/collision_errors-emfqcs-1.tfs" ;};

/* Fidel errors
!if (NRJ<3499.999) {readtable, file="fidel/injection/injection_errors-emfqcs-1.tfs" ;};
!if (NRJ>5000.000) {readtable, file="fidel/collision/collision_7000-emfqcs-1.tfs" ;};
*/

!! MO, MS, MSS field quality (not tested)
! readtable, file="db5/measured_errors/MO-MS-MSS_error-test.tfs"; ! dummy

!! Alignment errors (not tested)
! readtable, file="db5/measured_errors/LHC-egeoc-b1.tfs";
! readtable, file="db5/measured_errors/LHC-egeoc-b2.tfs";

!! 11T dipole field expected field quality
! call,file="slhc/errors/MBH_errortable_v1";


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!             apply field errors to MB magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ON_B2s =  1 ; ON_B2r =  1; 
!call,   file="db5/measured_errors/Efcomp_MB.madx"  ; 
ON_B2s =  0 ; ON_B2r =  0;

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!     correct orbit distortion resulting from MB magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if((ON_A1S)^2+(ON_A1r)^2+(ON_B1S)^2+(ON_B1r)^2 >0)
{
  exec,   initial_micado(4);
  exec,   initial_micado(4);
};

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!           apply field errors to all other magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Nominal LHC magnets
! Separation Dipoles
! call,   file="db5/measured_errors/Efcomp_MBRB.madx";
! call,   file="db5/measured_errors/Efcomp_MBRC.madx";
! call,   file="db5/measured_errors/Efcomp_MBRS.madx";
! call,   file="db5/measured_errors/Efcomp_MBX.madx" ;
! call,   file="db5/measured_errors/Efcomp_MBW.madx" ;
! call,   file="db5/measured_errors/Efcomp_MBXW.madx";

! Quadrupoles
! call,   file="db5/measured_errors/Efcomp_MQ.madx"  ;
!on_B2S:=0;call,file="db5/measured_errors/Efcomp_MQ.madx"; on_B2S:=1;
! call,   file="db5/measured_errors/Efcomp_MQM.madx" ;
! call,   file="db5/measured_errors/Efcomp_MQMC.madx";
! call,   file="db5/measured_errors/Efcomp_MQML.madx";
! call,   file="db5/measured_errors/Efcomp_MQTL.madx";
! call,   file="db5/measured_errors/Efcomp_MQW.madx" ;
! call,   file="db5/measured_errors/Efcomp_MQX.madx" ;
!on_B2S:=0;call,file="db5/measured_errors/Efcomp_MQX.madx"; on_B2S:=1;
! call,   file="db5/measured_errors/Efcomp_MQY.madx" ;
! call,   file="db5/measured_errors/Efcomp_MO.madx"  ;
! call,   file="db5/measured_errors/Efcomp_MS.madx"  ;
! call,   file="db5/measured_errors/Efcomp_MSS.madx" ;

! call, file="slhc/errors/Efcomp_MBH.madx";

! call, files="db5/measured_errors/Set_alignment_errors.madx";

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! MO settings
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

brho:=NRJ*1e9/clight;
if (mylhcbeam==1){
KOF.A12B1:=Kmax_MO*I_MO/Imax_MO/brho; 
KOF.A23B1:=Kmax_MO*I_MO/Imax_MO/brho;
KOF.A34B1:=Kmax_MO*I_MO/Imax_MO/brho; 
KOF.A45B1:=Kmax_MO*I_MO/Imax_MO/brho;
KOF.A56B1:=Kmax_MO*I_MO/Imax_MO/brho; 
KOF.A67B1:=Kmax_MO*I_MO/Imax_MO/brho;
KOF.A78B1:=Kmax_MO*I_MO/Imax_MO/brho; 
KOF.A81B1:=Kmax_MO*I_MO/Imax_MO/brho;

KOD.A12B1:=Kmax_MO*I_MO/Imax_MO/brho; 
KOD.A23B1:=Kmax_MO*I_MO/Imax_MO/brho;
KOD.A34B1:=Kmax_MO*I_MO/Imax_MO/brho; 
KOD.A45B1:=Kmax_MO*I_MO/Imax_MO/brho;
KOD.A56B1:=Kmax_MO*I_MO/Imax_MO/brho; 
KOD.A67B1:=Kmax_MO*I_MO/Imax_MO/brho;
KOD.A78B1:=Kmax_MO*I_MO/Imax_MO/brho; 
KOD.A81B1:=Kmax_MO*I_MO/Imax_MO/brho;
};

if (mylhcbeam>1){
KOF.A12B2:=Kmax_MO*I_MO/Imax_MO/brho; KOF.A23B2:=Kmax_MO*I_MO/Imax_MO/brho;
KOF.A34B2:=Kmax_MO*I_MO/Imax_MO/brho; KOF.A45B2:=Kmax_MO*I_MO/Imax_MO/brho;
KOF.A56B2:=Kmax_MO*I_MO/Imax_MO/brho; KOF.A67B2:=Kmax_MO*I_MO/Imax_MO/brho;
KOF.A78B2:=Kmax_MO*I_MO/Imax_MO/brho; KOF.A81B2:=Kmax_MO*I_MO/Imax_MO/brho;
KOD.A12B2:=Kmax_MO*I_MO/Imax_MO/brho; KOD.A23B2:=Kmax_MO*I_MO/Imax_MO/brho;
KOD.A34B2:=Kmax_MO*I_MO/Imax_MO/brho; KOD.A45B2:=Kmax_MO*I_MO/Imax_MO/brho;
KOD.A56B2:=Kmax_MO*I_MO/Imax_MO/brho; KOD.A67B2:=Kmax_MO*I_MO/Imax_MO/brho;
KOD.A78B2:=Kmax_MO*I_MO/Imax_MO/brho; KOD.A81B2:=Kmax_MO*I_MO/Imax_MO/brho;
};


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!               correction of field errors in MB (compatible with V6.503 & SLHC)
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 select, flag=error, clear;
 select, flag=error, pattern=MB\.,class=multipole;
! esave,  file="temp/MB.errors";
! system, "db5/errors/corr_MB_v3";
! call,   file="temp/MB_corr_setting.mad";
!exec reset_MB_corr;

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! correction of triplet and D1 (only in collision, not compatible with SLHC)
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if (NRJ>5999)
{
 option, echo, warn, -info;
 select, flag=error, clear;
 select, flag=error, pattern=MQX,  class=multipole;
 select, flag=error, pattern=MBX,  class=multipole;
 select, flag=error, pattern=MBRC, class=multipole;
! esave,  file="temp/tripD1D2.errors";
! system, "db5/errors/corr_tripD1";
! call,   file="temp/MCX_setting.mad";
 kcsx3.l2 :=0;kcsx3.r2 :=0;kcsx3.l8 :=0;kcsx3.r8 :=0; !switch off b3  correction in IR2 and IR8
 kcox3.l2 :=0;kcox3.r2 :=0;kcox3.l8 :=0;kcox3.r8 :=0; !switch off b4  correction in IR2 and IR8
 kctx3.l2 :=0;kctx3.r2 :=0;kctx3.l8 :=0;kctx3.r8 :=0; !switch off b6  correction in IR2 and IR8
 kqsx3.l2 :=0;kqsx3.r2 :=0;kqsx3.l8 :=0;kqsx3.r8 :=0; !switch off a2  correction in IR2 and IR8
 kcssx3.l2:=0;kcssx3.r2:=0;kcssx3.l8:=0;kcssx3.r8:=0; !switch off a3  correction in IR2 and IR8
 kcosx3.l2:=0;kcosx3.r2:=0;kcosx3.l8:=0;kcosx3.r8:=0; !switch off a4  correction in IR2 and IR8
};


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!    correct orbit distortion resulting from other magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if((ON_A1S)^2+(ON_A1r)^2+(ON_B1S)^2+(ON_B1r)^2 >0)
{
 exec, initial_micado(4);
 exec, initial_micado(4);
 exec, initial_micado(4);
 exec, initial_micado(4);
 };

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!    final orbit correction before applying crossing scheme
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if((ON_A1S)^2+(ON_A1r)^2+(ON_B1S)^2+(ON_B1r)^2 >0)
{ exec, final_micado(0.004); };

! end of orbit correction, now switch ON crossing scheme
! restoring crossing angle
on_x1=on_x1aux;on_sep1=on_sep1aux;
on_x2=on_x2aux;on_sep2=on_sep2aux; on_oe2=on_oe2aux; on_a2=on_a2aux;
on_x5=on_x5aux;on_sep5=on_sep5aux; on_ov5=on_ov5aux;
on_x8=on_x8aux;on_sep8=on_sep8aux; on_a8=on_a8aux;
on_alice=on_aliceaux; on_lhcb=on_lhcbaux;
on_disp=on_dispaux;

! coguess,x=x.ip1,px=px.ip1,y=y.ip1,py=py.ip1;

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!   Fine tuning of coupling after CO correction and with Xscheme
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

!call,file="db5/errors/FineCouplingCorrection.madx";

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!                 matching of orbit, tune and chromaticity
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

! remove BB for squeeze matching
!if(ON_COLLISION==0) {ON_BB_CHARGE:=1;};    ! W/o head-on Q and Q' are matched with bb

!on_disp=1; ! for ATS, in order to correct dispersion in the IR

!Rematch the CO in the arc for dispersion correction
if(ON_DISP<>0) {call,file="slhc/toolkit/rematchCOarc.madx";};

!Rematch the Xscheme towards specified separation and Xange in IP1/2/5/8
call,file="rematchCOIP.madx";

if(mylhcbeam==1)
{kqtf=kqtf.b1;kqtd=kqtd.b1;kqtf.b1:=kqtf;kqtd.b1:=kqtd;
 ksf=ksf.b1;ksd=ksd.b1;ksf.b1:=ksf;ksd.b1:=ksd;};

if(mylhcbeam>1)
{kqtf=kqtf.b2;kqtd=kqtd.b2;kqtf.b2:=kqtf;kqtd.b2:=kqtd;
 ksf=ksf.b2;ksd=ksd.b2;ksf.b2:=ksf;ksd.b2:=ksd;};

!deltaQx =  1.55357143e-06 * on_x5*on_x5 - 5.16428571e-04 * on_x5 + 4.21175000e-02;
!deltaQy = -1.41071429e-06 * on_x5*on_x5 + 4.72285714e-04 * on_x5 - 3.87275000e-02;
!qx0 = qx0 - deltaQx;
!qy0 = qy0 - deltaQy;

 match;
 global, q1=qx0, q2=qy0;
! vary,   name=kqtf, step=1.0E-7 ;
! vary,   name=kqtd, step=1.0E-7 ;
vary,   name=dQx.b1_sq, step=1.0E-7 ;
vary,   name=dQy.b1_sq, step=1.0E-7 ;
 lmdif,  calls=100, tolerance=1.0E-21;
 endmatch;

 match,chrom;
 global, dq1=qprime, dq2=qprime;
! vary,   name=ksf;
! vary,   name=ksd;
vary,   name=dQpx.b1_sq;
vary,   name=dQpy.b1_sq;
 lmdif,  calls=100, tolerance=1.0E-21;
 endmatch;

 match,chrom;
 global, dq1=qprime, dq2=qprime;
 global, q1=qx0, q2=qy0;
! vary,   name=ksf;
! vary,   name=ksd;
! vary,   name=kqtf, step=1.0E-7 ;
! vary,   name=kqtd, step=1.0E-7 ;
vary,   name=dQx.b1_sq;
vary,   name=dQy.b1_sq;
vary,   name=dQpx.b1_sq, step=1.0E-7 ;
vary,   name=dQpy.b1_sq, step=1.0E-7 ;
 lmdif,  calls=500, tolerance=1.0E-21;
 endmatch;


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!                 Check corrector strength
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

call,file="corr_value.madx";

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!                 final twiss before sending to sixtrack
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


ON_BB_CHARGE:=1;

/*
twiss;
 value, table(summ,q1);
 value, table(summ,q2);
 value, table(summ,dq1);
 value, table(summ,dq2);
 sixtrack, radius=0.017;
*/

!call,file="footprint.madx";
!exec PLOTFOOTPRINT(0.29,0.315,0.30,0.325, $on_x5);
!quit;

if (NRJ<4999.9999) {VRF400:=8. ;LAGRF400.B1=0.5;LAGRF400.B2=0.;};
if (NRJ>5000.0000) {VRF400:=16.;LAGRF400.B1=0.5;LAGRF400.B2=0.;};

twiss;
xnom1=table(twiss,IP1,x);pxnom1=table(twiss,IP1,px);ynom1=table(twiss,IP1,y);pynom1=table(twiss,IP1,py);
xnom2=table(twiss,IP2,x);pxnom2=table(twiss,IP2,px);ynom2=table(twiss,IP2,y);pynom2=table(twiss,IP2,py);
xnom5=table(twiss,IP5,x);pxnom5=table(twiss,IP5,px);ynom5=table(twiss,IP5,y);pynom5=table(twiss,IP5,py);
xnom8=table(twiss,IP8,x);pxnom8=table(twiss,IP8,px);ynom8=table(twiss,IP8,y);pynom8=table(twiss,IP8,py);
betxnom1 =table(twiss,IP1,betx) ;betynom1 = table(twiss,IP1,bety) ; 
betxnom5 =table(twiss,IP5,betx) ;betynom5 = table(twiss,IP5,bety) ; 


dtct1b1=table(twiss,TCTPH.4L1.B1,mux)-table(twiss,MKD.O5L6.B1,mux);
dtct5b1=table(twiss,TCTPH.4L5.B1,mux)-table(twiss,MKD.O5L6.B1,mux)+table(summ, q1);
ddtct1b1=(dtct1b1-floor(dtct1b1))*360;
ddtct5b1=(dtct5b1-floor(dtct5b1))*360;
value,dtct1b1,dtct5b1,ddtct1b1,ddtct5b1;

value,xnom1,xnom2,xnom5,xnom8;
value,ynom1,ynom2,ynom5,ynom8;
value,pxnom1,pxnom2,pxnom5,pxnom8;
value,pynom1,pynom2,pynom5,pynom8;
value, betxnom1,betynom1,betxnom5,betynom5;
value, table(summ,q1);
value, table(summ,q2);
value, table(summ,dq1);
value, table(summ,dq2);
sixtrack,cavall, radius=0.017;

if (ON_WIRE==1){
  !Add the wire among the bb lenses
  system,"sed 's/NEXT/$x\nNEXT/' bb_lenses.dat | x=$(<wire_lenses.dat) envsubst '$x' > bb_lenses.new && mv bb_lenses.new bb_lenses.dat";
}
!Fix bb lenses in sixtrack input
exec, SIXTRACK_INPUT_BB_LENSES;

select, flag=twiss, clear;
if (not_a_mask==1){
  twiss,file="last_twiss.1";
  System,"gzip -f last_twiss.1";
} else {
  twiss,file="last_twiss.%SEEDRAN";
  System,"gzip -f last_twiss.%SEEDRAN";
};

! Gianni: save sequences
save, sequence=lhcb1,lhcb1, file=lhcwbb.seq;
stop;
